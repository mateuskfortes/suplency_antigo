# Generated by Django 5.0.4 on 2024-05-25 03:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('grupos', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='usuarios', related_query_name='usuario', to='auth.group')),
                ('permissoes', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='usuarios', related_query_name='usuario', to='auth.permission')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FlashCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pergunta', models.CharField(max_length=200)),
                ('resposta', models.CharField(max_length=200)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcards', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Materia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_da_materia', models.CharField(max_length=20)),
                ('cor_da_materia', models.CharField(max_length=6)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materias', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FlashCardMateria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flash_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcard_materias', to='suplency.flashcard')),
                ('materia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcard_materias', to='suplency.materia')),
            ],
        ),
        migrations.AddField(
            model_name='flashcard',
            name='materias',
            field=models.ManyToManyField(through='suplency.FlashCardMateria', to='suplency.materia'),
        ),
        migrations.AddField(
            model_name='usuario',
            name='ultima_materia',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usuarios_ultima_materia', to='suplency.materia'),
        ),
        migrations.CreateModel(
            name='Pagina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_da_pagina', models.PositiveIntegerField()),
                ('cor_da_folha', models.CharField(max_length=6)),
                ('conteudo', models.CharField(max_length=1500)),
                ('materia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paginas', to='suplency.materia')),
            ],
        ),
        migrations.AddField(
            model_name='usuario',
            name='ultima_pagina',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usuarios_ultima_pagina', to='suplency.pagina'),
        ),
        migrations.CreateModel(
            name='Pomodoro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=30)),
                ('tempo_de_foco', models.DurationField()),
                ('tempo_de_pausa', models.DurationField()),
                ('tempo_de_pausa_longa', models.DurationField()),
                ('numero_focos_ate_pausa_longa', models.PositiveSmallIntegerField()),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pomodoro', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
